{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"capm/","title":"CAP","text":""},{"location":"capm/#what-is-cap","title":"What is CAP?","text":"<p>The SAP Cloud Application Programming Model (CAP) is a framework of languages, libraries, and tools for building enterprise-grade services and applications. </p> <p>Create a new project:- terminal -&gt; new Terminal -&gt; command \"cds init PROJECTSPECCIFNAME\". </p>"},{"location":"capm/#project-structure","title":"Project Structure","text":"<p>The default project structure of CAP projects is as follows:</p> <p>Folders:-</p> <p>The project folder may include subfolders for different purposes, such as: </p> <p>app: For creating the UI</p> <p>db: For creating files to define the application data model</p> <p>srv: For placing files of your service definition and business logic </p> <p>Files:- The project folder may include files such as: </p> <p>cdsrc.json: For specifying settings to be used across multiple projects</p> <p>package.json: For holding project specific configuration</p> <p>README.md: For project documentation</p> <p>Database : The most important things is about the database. During the application development time we uses the SQLite database, without changing much, we can easily move the application to HANA DB for production.</p> <p>Command for run the app cds watch: watches for changes in the CDS model cds run: run the app</p>"},{"location":"capm/hana/","title":"hana","text":""},{"location":"capm/hana/#sap-hana-cloud","title":"SAP HANA Cloud","text":"<ul> <li> <p>SAP HANA Cloud is a database as a service that powers mission-critical applications and real-time analytics with one solution at petabyte scale.</p> </li> <li> <p>SAP Hana cloud is a complete database and application development platform. By Combining In-Menory storage with columnar store, data operations are performed faster than in a traditional database with a disk-based storage.</p> </li> </ul>"},{"location":"capm/hana/#sap-hana-database-deployment-infrastructure","title":"SAP HANA Database Deployment Infrastructure","text":"<p>SAP HANA Deployment Infrastructure (HDI) provides a service that enables you to deploy database development artifacts to so-called containers.These containers store design-time artifacts and deployed run-time objects for the HANA platform database. They include tables, views, functions, and procedures.</p>"},{"location":"capm/hana/#schema","title":"Schema","text":"<p>schema is a logical container that organizes database content into sub-databases. Schemas can be named statically or dynamically. Dynamic schema names are generated when an HDI Container is first created in the system. </p>"},{"location":"capm/hana/#data-lake","title":"Data Lake","text":"<p>A data lake is a centralized repository designed to store, process, and secure large amounts of structured, semistructured, and unstructured data.</p>"},{"location":"capm/hana/#connect-sap-hana-cloud-with-cap-application","title":"Connect SAP HANA cloud with CAP Application","text":"<p>Setup Steps in SAP HANA Cloud - Go to SAP BTP Cockpit \u2192 Access the sub-account used for SAP HANA Cloud - Go to \"Instances and Subscriptions\" - Find the instance with Service \"SAP HANA Cloud\" and plan \"hana\" for the database instance that you want to connect. - Select the row of the instance - Go to tab \"Service Keys\" - Click \"Create\" - Enter a name for the service key - Click \"Create\"</p> <p>STEP 1: In the SAP BTP Cockpit, click on your subaccount. </p> <p>STEP 2: Then click on Entitlements on the left-hand side menu and search for entitlements for SAP HANA. </p> <p>STEP 3: From SAP BTP Cockpit, click on Services and then Service Marketplace. Search for SAP HANA Cloud and click Create in the top-right corner. </p> <p>STEP 4: Select SAP HANA Cloud under Service and tools under Plan. </p> <p></p> <p>STEP 5: To ensure that your desired user has the necessary permissions to manage instances in HANA Cloud Central, navigate to Security &gt; Users in the left-hand side menu. Then click on your user. </p> <p>STEP 6: Click on the Assign Role Collection button &amp; Select SAP HANA Cloud Administrator then click Assign Role Collection. </p> <p>STEP 7: Here you must choose the Type of instance to create. Select SAP HANA Cloud, SAP HANA Database. </p> <p>STEP 8: In the Basics section, enter a name for your instance in the field Instance Name, Insert a password in the Administrator Password field &amp; Now click on Next STEP to continue. </p> <p>STEP 9: Here, you can select how much Memory you wish to allocate to this instance </p> <p>STEP 10: Select the availability zone for your instance and optionally, include a replica. </p> <p>STEP 11: You can now manage the allowed connections for your SAP HANA database instance, i.e., you can choose to allow access to your SAP HANA database instance from outside of the SAP Business Technology Platform. You can either limit it to SAP Business Technology Platform by denying all IP addresses, or allow specific applications to access it by inserting one or more specific IP addresses. Finally, you can also allow all connections from all IP addresses.</p> <p>Next, you can also choose to enable the SAP Cloud Connector, which makes it easier to connect this SAP HANA database instance to an SAP HANA on-premise database. </p> <p>STEP 12: If you click on Create data lake, a managed SAP HANA Cloud, data lake will be provisioned alongside your SAP HANA database in SAP HANA Cloud. </p>"},{"location":"ci-cd/","title":"CI/CD","text":"<p>GitHUB</p> <ul> <li> <p>GitHub is a web-based platform that uses Git for version control and provides a user-friendly interface for managing Git repositories.</p> </li> <li> <p>GitHub adds collaboration tools such as issue tracking, code reviews, project management, and continuous integration.</p> </li> </ul> <p>GIT</p> <p>GitHub Actions: Provides CI/CD (Continuous Integration and Continuous Deployment) workflows directly within GitHub to automate testing, building, and deployment.</p>"},{"location":"fiori/fiori/","title":"Contents","text":""},{"location":"fiori/fiori/#sap-fiori","title":"SAP FIORI","text":"<p>Sap Fiori is a new user experience (UX) for sap software and application.It focuses on creating a simple, intuitive and responsive user interface for SAP application, making it easier for users to interact with various SAP systems and applications. SAP Fiori is known for its modern design principle and user-friendly exprience. Sap Fiori enables multiple devices application that allows users to start a process on their desktop/laptop and to continue that process on a smartphone or on a tablet.</p>"},{"location":"fiori/fiori/#design-principles","title":"Design Principles","text":"<p>The design philosophy of SAP Fiori is based on five core principles. SAP Fiori user experience is role-based, adaptive, simple, coherent, and delightful.</p> <ul> <li>Role- Based: Tailored for Specific user roles.</li> <li>Adaptive/Responsive: Work well on various device</li> <li>Simple: easy to understand</li> <li>Coherent: Consistent design and behavior</li> <li>Delightful: user-centric and Visually appealing</li> </ul>"},{"location":"fiori/fiori/#type-of-fiori-app","title":"Type of Fiori app","text":"<p>SAP Fiori has three app types, each distinguished by their focus and infrastructure requirements:</p> <ul> <li>Transactional apps for Routine Task</li> <li>Fact sheets for Providing an Overview of a Business Object</li> <li>Analytical apps for Real-Time Data Analysis</li> </ul>"},{"location":"fiori/fiori/#sap-fiori-launchpad","title":"SAP FIORI LAUNCHPAD :","text":""},{"location":"fiori/fiori/#launchpad-is-the-single-entry-point-for-all-business-users","title":"Launchpad is the single entry point for all business users.","text":""},{"location":"fiori/fiori/#httphostdomainportsapbcui5_ui5ui2ushellshellsabapfiorilaunchpadhtmlsap-clientclientsap-languageen","title":"<code>http://&lt;host&gt;.&lt;domain&gt;:&lt;port&gt;/sap/bc/ui5_ui5/ui2/ushell/shells/abap/Fiorilaunchpad.html?sap-client=&lt;client&gt;&amp;sap-language=EN</code>","text":""},{"location":"fiori/fiori/#t-code","title":"T-code:","text":"<ul> <li>/n/UI2/FLP- Launchpad</li> <li>/n/UI2/FLPD_CUST- Launchpad Designer</li> </ul>"},{"location":"fiori/fiori/#sap-fiori-launchpad-designer","title":"SAP FIORI LAUNCHPAD DESIGNER :","text":""},{"location":"fiori/fiori/#the-fiori-launchpad-designer-is-a-tool-to-configure-the-tiles-for-static-and-dynamic-fiori-apps","title":"The Fiori launchpad designer is a tool to configure the tiles for static and dynamic Fiori apps.","text":""},{"location":"fiori/fiori/#httphostdomainportsapbcui5_ui5saparsrvc_upb_admnmainhtmlsap-clientclientscopecust","title":"<code>HTTP://&lt;host&gt;.&lt;domain&gt;:&lt;port&gt;/sap/bc/ui5_ui5/sap/arsrvc_upb_admn/main.html?sap-client=&lt;client&gt;?scope=CUST</code>","text":""},{"location":"fiori/fiori/#httphostdomainportsapbcui5_ui5saparsrvc_upb_admnmainhtmlsap-clientclientscopeconf","title":"<code>HTTP://&lt;host&gt;.&lt;domain&gt;:&lt;port&gt;/sap/bc/ui5_ui5/sap/arsrvc_upb_admn/main.html?sap-client=&lt;client&gt;?scope=CONF</code>","text":""},{"location":"fiori/fiori/#catalog","title":"CATALOG :","text":"<p>A catalog is a set of apps we want to make available for one role. TWO WAYS OF SAP FIORI APPS IMPLEMENTATION :</p> <ul> <li>Standard Fiori apps</li> <li>Customized Fiori apps</li> </ul>"},{"location":"fiori/fiori/#group","title":"GROUP:","text":"<p>A group is a subset of Applications from one or more catalogs.</p>"},{"location":"fiori/fiori/#semantic-object","title":"Semantic Object:","text":"<p>IT Represents a business entity such as a customer, a sales order, or a product. Using semantic objects, you can bundle applications that reflect a specific scenario. They allow you to refer to objects in a standardized way, abstracting from concrete implementations of these objects. You can either use semantic objects shipped by SAP, or create new semantic objects.</p>"},{"location":"fiori/fiori/#target-mapping","title":"TARGET MAPPING :","text":"<p>Target mapping is part of the SAP Fiori launchpad configuration. It defines the target application, which is launched when clicking on a tile, on a link or within app-to-app navigation.</p>"},{"location":"fiori/fiori/#intent","title":"Intent:","text":"<p>An intent is a unique combination of a semantic object (for example, Purchase Order) and an action (for example, Display) and an optional set of navigation parameters.</p> <p>To summarize: When a user clicks a tile in their launchpad, the intent (including optional parameters) navigates to the app and opens it.</p>"},{"location":"fiori/fiori/#system-alias","title":"System Alias:","text":"<p>An SAP system alias is needed as the logical name of a system connection, that is, you specify where the SAP system alias should point to. Depending on the Gateway content scenario and your system landscape you thus set up the system alias.</p>"},{"location":"fiori/fiori/#sap-fiori-for-sap-s4hana-top-5-fiori-features-that-bring-value-to-every-business-user","title":"SAP Fiori for SAP S/4HANA \u2013 Top 5 Fiori features that bring value to every Business User","text":"<ul> <li>Fiori Enterprise Search</li> <li>Fiori Notifications</li> <li>Fiori Default Values</li> <li>Fiori Personalization</li> <li>User Assistance</li> </ul>"},{"location":"fiori/fiori/#standard-fiori-apps","title":"Standard Fiori apps","text":"<p>STEP 1 : GO TO SAP REFERENCE LIBRARY </p> <p>STEP 2: CLICK ON ALL APPS FOR SAP S/4 HANA </p> <p>STEP 3: CLICK ON ALL APPS STEP 4: SEARCH FOR REQUIREED T-CODE STEP 5: GO TO IMPLEMENTATION INFORMATION AND CKECK THE SOFTWARE COMPONENT IN INSTALLATION</p> <p> STEP 6: LOG ON SAP GUI and goto system -&gt; status-&gt; product version where we check the software component is installed or not</p> <p>STEP 7: IF SOFTWARE COMPONENT IS INSTALLED THEN COPY THE BUSSINESS CATALOG </p> <p>STEP 8: LOG IN FIORI LAUNCHPAD DESIGNER AND PASTE THE BUSSINESS CATALOG </p> <p>STEP 9: FIND THE RIGHT ONE T-CODE APPS AND CREATE COPY WITH REFERENCE AND TARGET MAPPING ALSO </p> <p>STEP 10: CREATE a group and assign the catalog to this group </p> <p>Step 11: create a role to the user </p>"},{"location":"js/concurrency/","title":"Concurrency","text":""},{"location":"js/concurrency/#cpu-bound-vs-io-bound-process","title":"cpu bound vs IO bound process","text":"<ul> <li>CPU bound: <code>calculation, if-else, for-loop, normal codes</code></li> <li>IO bound: <code>network calls, read/write to files</code></li> </ul>"},{"location":"js/concurrency/#busy-waitng","title":"Busy waitng","text":"<ul> <li>waiting for something, rather than doing something useful</li> <li>wastes cpu cycles</li> </ul>"},{"location":"js/concurrency/#concurrency-vs-parallelism","title":"concurrency vs parallelism","text":"<ul> <li>Concurrency: one person switches between different tasks </li> <li> <p>Parallelism: multiple people work on different tasks</p> </li> <li> <p>Context switching: Context switching is when we shift our attention between different tasks, apps, or projects</p> <p>In cpu terms, switching from one process/task to another.</p> </li> </ul> <p>people = cpu (cores)</p>"},{"location":"js/concurrency/#race-condition-critical-section","title":"Race condition (<code>critical section</code>)","text":"<ul> <li>a critical section refers to a segment of code that is executed by multiple concurrent threads or processes, and which accesses shared resources</li> </ul> <p>Resource: variables, files, etc.</p>"},{"location":"js/concurrency/#mutual-exclusion-mutex","title":"Mutual Exclusion (<code>Mutex</code>)","text":""},{"location":"js/concurrency/#deadlock","title":"Deadlock","text":"<p>A deadlock is a situation in which two computer programs sharing the same resource are effectively preventing each other from accessing the resource, resulting in both programs ceasing to function.</p>"},{"location":"sapui5/sapui5/","title":"Introduction","text":""},{"location":"sapui5/sapui5/#sapui5","title":"SAPUI5","text":"<p>SAPUI5 is a framework for developing platform-independent, responsive applications according to the HTML5 standard with JavaScript and CSS3.</p>"},{"location":"sapui5/sapui5/#sapui5-architecture","title":"SAPUI5 Architecture","text":"<p>SAPUI5 allows users to consume data from any service. It uses the model-view-controller (MVC) development concept, which consists of a three-part application: models, which contain data; views, which represent the data and the UI; and controllers, which handle the data and user interaction.</p>"},{"location":"sapui5/sapui5/#models","title":"Models","text":"<p>Models are containers for data and hold all the business data an application will work with. There are a handful of pre-defined model classes available in SAPUI5, including JSON and resource models.</p>"},{"location":"sapui5/sapui5/#views","title":"Views","text":"<p>Views are the front-end display of data by an application. Because this is the portion of the app that end-users work with, it\u2019s important to incorporate design thinking and UI best practices when developing views.</p>"},{"location":"sapui5/sapui5/#controllers","title":"Controllers","text":"<p>Controllers implements the logic that bridges Models and Views.</p>"},{"location":"sapui5/sapui5/#lifecycle-methods-or-lifecycle-hooks-in-sapui5-controller","title":"Lifecycle Methods or Lifecycle Hooks in SAPUI5 Controller","text":"<p>SAPUI5 provides predefined lifecycle methods for controller. These are also called controller lifecycle hooks. These methods are</p> <ul> <li> <p>onInit()</p> </li> <li> <p>onBeforeRendering()</p> </li> <li> <p>onAfterRendering()</p> </li> <li> <p>onExit()</p> </li> </ul>"},{"location":"sapui5/sapui5/#oninit","title":"onInit()","text":"<p>This method is called upon initialization of the View. The controller can perform its internal setup in this hook. It is only called once per View instance, unlike the onBeforeRendering and onAfterRendering hooks.</p> <p>If you need to modify the view before it is displayed, for example bind data to view, initialize model; it can be done inside onInit() methd.</p>"},{"location":"sapui5/sapui5/#onbeforerendering","title":"onBeforeRendering()","text":"<p>This method is called every time the View is rendered, before the Renderer is called and the HTML is placed in the DOM-Tree. BOLD_It can be used to perform clean-up-tasks before re-rendering._BOLD</p>"},{"location":"sapui5/sapui5/#onafterrendering","title":"onAfterRendering()","text":"<p>This method is called every time the View is rendered, after the HTML is placed in the DOM-Tree. It can be used to apply additional changes to the DOM after the Renderer has finished.</p> <p>It can be used to do post-rendering manipulations of the HTML.</p>"},{"location":"sapui5/sapui5/#onexit","title":"onExit()","text":"<p>This method is called upon destruction of the View. The controller should perform its internal destruction in this hook. It is only called once per View instance, unlike the onBeforeRendering and onAfterRendering hooks.</p>"},{"location":"sapui5/sapui5_1/","title":"Bindings","text":""},{"location":"sapui5/sapui5_1/#types-of-model","title":"Types of Model:","text":"<p>OData model:</p> <p>Enables binding of controls to data from OData services. The OData model supports two-way (default), one-way and one-time binding modes. However, two-way binding is currently only supported for properties, and not for aggregations.</p> <p>JSON model The JSON model can be used to bind controls to JavaScript object data, which is usually serialized in the JSON format. The JSON model is a client-side model and, therefore, intended for small data sets, which are completely available on the client. The JSON model supports two-way (default), one-way and one-time binding modes.</p> <pre><code>var oModel = new sap.ui.model.json.JSONModel();\noModel.setData({\n    firstName: \"Peter\",\n    lastName: \"Pan\"\n});\n</code></pre> <p>To change the default binding mode, call the setDefaultBindingMode method on the model as follows:</p> <p><pre><code>var oModel = new sap.ui.model.json.JSONModel();\noModel.setDefaultBindingMode(sap.ui.model.BindingMode.OneWay);\n</code></pre> XML model:</p> <p>A client-side model intended for small data sets, which are completely available on the client. The XML model does not contain mechanisms for server-based paging or loading of deltas. The XML model supports two-way (default), one-way and one-time binding modes.</p> <p>Resource model:</p> <p>Designed to handle data in resource bundles, mainly to provide texts in different languages. The resource model only supports one-time binding mode because it deals with static texts only.</p> <p>Note:-</p> <ul> <li> <p>The JSON model, XML model, and the resource model are client-side models, meaning that the model data is loaded completely and is available on the client. Operations such as sorting and filtering are executed on the client without further server requests.</p> </li> <li> <p>The OData model is a server-side model and only loads the data requested by the user interface from the server.</p> </li> </ul>"},{"location":"sapui5/sapui5_1/#types-of-view","title":"Types of View:","text":"<ul> <li>XML view</li> <li>JSON view</li> <li>JS view</li> <li>HTML view</li> </ul>"},{"location":"sapui5/sapui5_1/#binding-modes","title":"Binding Modes","text":"<ul> <li> <p>One Way: One-way binding means a binding from the model to the view; value changes in the model update all corresponding bindings and the view</p> </li> <li> <p>Two Way: Two-way binding means a binding from the model to the view and from the view to the model; value changes in the model and in the view update all corresponding bindings and the view and model, respectively</p> </li> <li> <p>One Time: One-time binding means from model to view once.</p> </li> </ul> <p></p>"},{"location":"sapui5/sapui5_1/#binding-types","title":"Binding Types","text":"<ul> <li>Element binding</li> <li>Property binding</li> <li>Aggregation binding</li> </ul>"},{"location":"sapui5/sapui5_1/#element-binding","title":"Element binding","text":"<p>Element binding allows you to bind elements to a specific object in the model data, which will create a binding context and allow relative binding within the control and all of its children. This is especially helpful in master-detail scenarios.</p> <ul> <li>use element binding in an XML view:</li> </ul> <pre><code>  &lt;mvc:View\n    controllerName=\"sap.ui.sample.App\"\n    xmlns=\"sap.m\"\n    xmlns:mvc=\"sap.ui.core.mvc\"&gt;\n    &lt;Input id=\"companyInput\"\n        binding=\"{/company}\"\n        value=\"{name}\"\n        tooltip=\"The name of the company is '{name}'\"/&gt; \n&lt;/mvc:View&gt;\n</code></pre> <ul> <li>An element binding in JavaScript, for example in a controller, use the bindElement method on a control:</li> </ul> <pre><code>        var oInput = this.byId(\"companyInput\")\n        oInput.bindElement(\"/company\");\n        oInput.bindProperty(\"value\", \"name\");\n</code></pre>"},{"location":"sapui5/sapui5_1/#aggregation-binding","title":"Aggregation binding","text":"<p>Aggregation binding is used to automatically create child controls according to model data.</p> <ul> <li>Display the company list in an XML view:</li> </ul> <pre><code>&lt;mvc:View\n    controllerName=\"sap.ui.sample.App\"\n    xmlns=\"sap.m\"\n    xmlns:mvc=\"sap.ui.core.mvc\"&gt;\n    &lt;List id=\u201dcompanyList\u201d items=\"{/companies}\"&gt;\n        &lt;items&gt;\n            &lt;StandardListItem\n                title=\"{name}\"\n                description=\"{city}\"\n            /&gt;\n        &lt;/items&gt;\n    &lt;/List&gt;\n&lt;/mvc:View&gt;\n</code></pre>"},{"location":"sapui5/sapui5_1/#property-binding","title":"Property Binding","text":"<p>Property binding allows properties of the control to get automatically initialized and updated from model data.</p> <pre><code>&lt;mvc:View\n    controllerName=\"sap.ui.sample.App\"\n    xmlns=\"sap.m\"\n    xmlns:mvc=\"sap.ui.core.mvc\"&gt;\n    &lt;Input\n        value=\"{/company/name}\"\n    /&gt;\n&lt;/mvc:View&gt;\n</code></pre> <ul> <li>NOTE: SAP doc for reference ( https://help.sap.com/docs/UI_ADD-ON_FOR_SAP_NETWEAVER_20/b4b7cba328bc480d9b373c7da9335537/68b9644a253741e8a4b9e4279a35c247.html )</li> </ul>"},{"location":"sapui5/sapui5_1/#controls","title":"Controls","text":"<p>Controls are the decision-makers in a line of code. Sometimes called widgets, components, or elements, they tell the app what to do whenever a choice has to be made. Currently, more than 200 controls exist with more in development.</p>"},{"location":"sapui5/sapui5_1/#libraries","title":"Libraries","text":"<p>Controls are accessible to developers via numerous libraries. Here\u2019s a brief overview of key libraries and what they allow:</p> <ul> <li>ui.core: core functionality; essential to all SAPUI5 apps</li> <li>m: main library; includes most basic and important controls for mobile and desktop devices</li> <li>ui.layout: structure controls for element display</li> <li>ui.unified: mobile and desktop controls</li> <li>ui.table: data controls for large-volume data</li> <li>viz: different types of charts</li> <li>ui.comp: smart content such as SmartField, SmartTable, etc.</li> <li>ushell: shell, service-related functionality</li> </ul>"},{"location":"sapui5/sapui5_2/","title":"Navigation","text":""},{"location":"sapui5/sapui5_2/#types-of-navigation","title":"Types of Navigation:","text":"<ul> <li>Intent-based navigation</li> <li>URL fragment-based navigation </li> <li>Cross-app navigation</li> <li>Inner-app navigation</li> <li>Hash-based navigation: This type of navigation allows users to pass data from the hash to any view. It also allows users to adjust the current hash so that it can be used as a bookmarkable URL. </li> </ul> <p>Cross-app</p> <ul> <li>Cross Application Navigation is to navigate between different applications in the Fiori Launchpad without coming to the Home Page.</li> <li>We can do this from a Custom Fiori app to a  Standard Fiori app. Alternatively, we can navigate from a Custom Fiori app to another Custom Fiori app in Fiori Launchpad.</li> <li>This can be done in the On-premise Launchpad and the BTP Launchpad.</li> </ul> <p>Code Snippet</p> <pre><code>onPressSupplier: function(oEvent) {\n  var supplier = oEvent.getSource().getBindingContext().getProperty(\"Product/SupplierID\"); // read SupplierID from OData path Product/SupplierID\n  var oCrossAppNavigator = sap.ushell.Container.getService(\"CrossApplicationNavigation\"); // get a handle on the global XAppNav service\n  var hash = (oCrossAppNavigator &amp;&amp; oCrossAppNavigator.hrefForExternal({\n  target: {\n  semanticObject: \"Supplier\",\n  action: \"display\"\n  },\n  params: {\n  \"supplierID\": supplier\n  }\n  })) || \"\"; // generate the Hash to display a Supplier\n  oCrossAppNavigator.toExternal({\n  target: {\n  shellHash: hash\n  }\n  }); // navigate to Supplier application\n  }\n</code></pre>"},{"location":"sapui5/sapui5_2/#url-fragment-based-navigation","title":"URL fragment-based navigation","text":"<ul> <li>DEFINING ROUTES &amp; TARGET IN Manifest.json</li> </ul> <p>Code Snippet</p> <pre><code> \"routes\": [\n        {\n          \"name\": \"RouteView1\",\n          \"pattern\": \":?query:\",\n          \"target\": [\n            \"TargetView1\"\n          ]\n        },\n        {\n          \"name\": \"View2\",\n          \"pattern\": \"View2/{MaintGrp},{Qmnum},{Equnr},{Qmtxt}\",\n          \"target\": [\n            \"View2\"\n          ]\n        }\n      ],\n</code></pre> <pre><code>      \"targets\": {\n        \"TargetView1\": {\n          \"viewType\": \"XML\",\n          \"transition\": \"slide\",\n          \"clearControlAggregation\": false,\n          \"viewId\": \"View1\",\n          \"viewName\": \"View1\"\n        },\n        \"View2\": {\n          \"viewType\": \"XML\",\n          \"transition\": \"slide\",\n          \"clearControlAggregation\": false,\n          \"viewId\": \"View2\",\n          \"viewName\": \"View2\"\n        }\n      }\n</code></pre> <ul> <li> <p>\u201croutes\u201d is the array that contains the individual routes. </p> </li> <li> <p>The \"pattern\" property defines the URL hash fragment pattern. In the first case, an empty string refers to the default route, which will match when the URL has no hash fragment, whereas in the second case route will match when the URL has a hash fragment of \"#View2.\" </p> </li> <li> <p>The target represents the name of the target view that will be displayed when this route is matched. In the first case, it refers to the \"View1\" view, whereas in the second case it refers to the \u201cView2\u201d view</p> </li> <li> <p>\u201ctargets\u201d is the array that contains the individual targets. </p> </li> <li> <p>\"transition\" specifies the type of transitional effect that will be used during navigation in this case its slide. </p> </li> <li> <p>The \"clearControlAggregation\" property determines whether the target's container control should be cleared before adding the new view.</p> </li> </ul> <p>Home.Controller code</p> <p></p> <pre><code> onInit: function () {\n                // Initialize the router in the onInit method\n                this._oRouterView1 = this.getOwnerComponent().getRouter();\n                this._oRouterView1.getRoute(\"View1\").attachMatched(this.handleRouteMatched, this);\n            },\n</code></pre> <p>View1.Controller code</p> <p>In the below image we are navigating to \u201cEmployeeDetails\u201d view and passing the id parameter with the value of the variable employeeID.</p> <p></p> <p>By handling the route matched event and using the passed parameter \u2018employeeID\u2019, we can fetch the relevant data and update the view dynamically. </p> <p>Here in the below image, we are using \u2018employeeID\u2019 retrieved from the URL parameter to fetch the employee details from the backend using oData model, after successful retrieval of the employee details a new JSON model is created \u2018oEmployeeDetailsModel\u2019 and is set with the retrieved data in the \u201cEmployeeDetails\u201d view. </p> <p></p>"},{"location":"sapui5/sapui5_3/","title":"Interview Prep","text":""},{"location":"sapui5/sapui5_3/#bootstrapping","title":"Bootstrapping","text":"<p>The process of loading and initializing SAPUI5 is called bootstrapping.</p> <pre><code>&lt;script\n        id=\"sap-ui-bootstrap\"\n        src=\"resources/sap-ui-core.js\"\n        data-sap-ui-theme=\"sap_bluecrystal\"\n        data-sap-ui-resourceroots='{\n            \"engineerdigitalmaintenance\": \"./\"\n        }'\n        data-sap-ui-oninit=\"module:sap/ui/core/ComponentSupport\"\n        data-sap-ui-compatVersion=\"edge\"\n        data-sap-ui-async=\"true\"\n        data-sap-ui-frameOptions=\"trusted\"\n    &gt;&lt;/script&gt;\n</code></pre> <p>id : \"sap-ui-bootstrap\" to ensure proper booting of the  SAPUI5 runtime.</p> <p>src : it initializes the SAPUI5 runtime and loads additional resources.</p> <p>data-sap-ui-theme: The SAPUI5 controls support different themes.</p> <p>data-sap-ui-compatVersion: To make use of the most recent functionality of SAPUI5 we define the compatibility version as edge.</p> <p>data-sap-ui-resourceroots: It defines the resource roots for the application namespaces. It maps the namespace \"engineerdigitalmaintenance\" to the root directory \"./\". This setup allows the application to load modules and resources correctly based on the defined namespaces.</p> <p>data-sap-ui-oninit:  This attribute specifies a module that should be loaded once the SAPUI5 core has been initialized. The module \"sap/ui/core/ComponentSupport\" enables automatic instantiation of UI components that are defined in the HTML using the data-sap-ui-component attribute, allowing declarative use of SAPUI5 components.</p> <p>data-sap-ui-async: This enables asynchronous loading of SAPUI5 modules, improving the performance by loading resources in parallel and not blocking the page rendering. This is the recommended approach for better performance.</p> <p>data-sap-ui-frameOptions: This attribute specifies the frameOptions to control how the app can be embedded in an iframe. \"trusted\" allows embedding only from trusted sources, enhancing security by preventing clickjacking attacks.</p>"},{"location":"sapui5/sapui5_3/#flow-of-sapui5-app-execution-project-structure","title":"Flow of SAPUI5 App Execution &amp; project structure?","text":"<ul> <li>Index.html : loads ui5 libraries</li> <li>component.js: component configuration, router, and models are initialized</li> <li>manifest.json: configuration for the app</li> <li>controller: handles view logic</li> <li>view: defines the ui structure</li> <li>model: manage data</li> </ul>"},{"location":"sapui5/sapui5_3/#default-model","title":"Default Model","text":"<p>The default model refers to a data model that is set without a specific name, it to be usually a JSON model and can be accessed without explicitly naming.</p> <pre><code>var oModel = sap.ui.getCore().getModel();  // Retrieves the default model\n</code></pre> <p>Combobox setting binding values?  - \"items\"</p> <p>Combobox as the default value?    - \"selectedkey\"</p> <p>Add Secondary values to ComboBox? - \"items\"</p>"},{"location":"sapui5/sapui5_3/#difference-between-sapuitable-and-sapmtable","title":"Difference between sap.ui.table and sap.m.table?","text":"<p>sap.ui.table.Table </p> <ul> <li>Suitable for desktop-focused applications</li> <li>Handle complex data interactions, large datasets, and advanced features.</li> </ul> <p>sap.m.Table</p> <ul> <li>Suitable for  mobile applications</li> <li>Designed for lightweight use cases, focusing on responsiveness and adaptability across different screen sizes.</li> </ul> <p>FORMATTERS</p> <ul> <li> <p>Formatters are JavaScript functions that take input data (e.g., from a model) and transform it into a desired output format suitable for display.</p> </li> <li> <p>They are often used in XML views to convert, format, or modify data values directly in the binding syntax, enhancing the presentation of data in the UI.</p> </li> <li> <p>Typical use cases include formatting dates, numbers, currency values, strings, or applying conditional formatting based on data values.</p> </li> </ul> <p>Define a formatter function in a separate file</p> <pre><code>// formatter.js\nsap.ui.define([], function () {\n    \"use strict\";\n    return {\n        currencyFormatter: function (value) {\n            return parseFloat(value).toFixed(2) + \" USD\";\n        },\n        dateFormatter: function (date) {\n            if (!date) return \"\";\n            var oDateFormat = sap.ui.core.format.DateFormat.getDateInstance({ pattern: \"yyyy-MM-dd\" });\n            return oDateFormat.format(new Date(date));\n        }\n    };\n});\n</code></pre> <p>use formatter in XML:</p> <pre><code>&lt;mvc:View\n    controllerName=\"myApp.controller.Main\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\"&gt;\n    &lt;Text text=\"{path: 'name', formatter: '.formatter.upperCaseFormatter'}\" /&gt;  &lt;!-- Applies the formatter --&gt;\n&lt;/mvc:View&gt;\n</code></pre> <p>Include the Formatter in the Controller: Load the formatter module in the controller using sap.ui.define.</p> <pre><code>// Main.controller.js\nsap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"myApp/formatter/formatter\"  // Adjust the path as needed\n], function (Controller, formatter) {\n    \"use strict\";\n    return Controller.extend(\"myApp.controller.Main\", {\n        formatter: formatter,  // Assign formatter to the controller\n        onInit: function () {\n            // Initialization code\n        }\n    });\n});\n</code></pre>"},{"location":"sapui5/sapui5_3/#fragments","title":"Fragments","text":"<ul> <li> <p>Lightweight and Reusable UI</p> </li> <li> <p>Fragments can also be used directly within XML views</p> </li> </ul> <pre><code>&lt;mvc:View\n    controllerName=\"myApp.controller.Main\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"&gt;\n    &lt;VBox&gt;\n        &lt;!-- Load a fragment within a view --&gt;\n        &lt;core:Fragment fragmentName=\"myApp.view.MyFragment\" type=\"XML\" /&gt;\n    &lt;/VBox&gt;\n&lt;/mvc:View&gt;\n</code></pre> <ul> <li>We can create a seperate fragmemt file e.g., MyFragment.fragment.xml</li> </ul> <pre><code>&lt;!-- MyFragment.fragment.xml --&gt;\n&lt;core:FragmentDefinition xmlns=\"sap.m\" xmlns:core=\"sap.ui.core\"&gt;\n    &lt;Dialog id=\"myDialog\" title=\"My Dialog\" draggable=\"true\" resizable=\"true\"&gt;\n        &lt;content&gt;\n            &lt;VBox&gt;\n                &lt;Text text=\"This is a reusable dialog fragment.\" /&gt;\n                &lt;Input placeholder=\"Enter something...\" /&gt;\n            &lt;/VBox&gt;\n        &lt;/content&gt;\n        &lt;beginButton&gt;\n            &lt;Button text=\"OK\" press=\"onDialogOkPress\" /&gt;\n        &lt;/beginButton&gt;\n        &lt;endButton&gt;\n            &lt;Button text=\"Cancel\" press=\"onDialogCancelPress\" /&gt;\n        &lt;/endButton&gt;\n    &lt;/Dialog&gt;\n&lt;/core:FragmentDefinition&gt;\n</code></pre> <ul> <li>Fragments can be loaded into a view or controller using the sap.ui.xmlfragment function. This function loads the fragment and returns its content.</li> </ul> <pre><code>// Main.controller.js\nsap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"sap/ui/core/Fragment\"\n], function (Controller, Fragment) {\n    \"use strict\";\n    return Controller.extend(\"myApp.controller.Main\", {\n        onInit: function () {\n            // Initialization logic\n        },\n\n        onOpenDialog: function () {\n            var oView = this.getView();\n\n            // Create or retrieve the fragment\n            if (!this.byId(\"myDialog\")) {\n                // Load the fragment asynchronously\n                Fragment.load({\n                    id: oView.getId(),               // Assign the fragment ID\n                    name: \"myApp.view.MyFragment\",  // Path to the fragment\n                    controller: this               // Assign controller to handle events\n                }).then(function (oDialog) {\n                    // Connect the fragment's lifecycle to the view\n                    oView.addDependent(oDialog);\n                    oDialog.open();\n                });\n            } else {\n                // Open the dialog if it already exists\n                this.byId(\"myDialog\").open();\n            }\n        },\n\n        onDialogOkPress: function () {\n            // Handle OK button press\n            this.byId(\"myDialog\").close();\n        },\n\n        onDialogCancelPress: function () {\n            // Handle Cancel button press\n            this.byId(\"myDialog\").close();\n        }\n    });\n});\n</code></pre>"},{"location":"sapui5/sapui5_3/#can-one-view-have-multiple-controllers-no","title":"can one view have multiple controllers? - NO","text":""},{"location":"sapui5/sapui5_3/#can-one-controller-have-multiple-views-yes","title":"can one controller have multiple views? - yes","text":""},{"location":"sapui5/sapui5_3/#difference-between-sapuidefine-and-sapuirequire","title":"Difference between sap.ui.define and sap.ui.require?","text":"<p>sap.ui.define is used to define a new module and declare its dependencies. It is primarily used for creating SAPUI5 modules, such as controllers, views, components, or utility functions.</p> <p>sap.ui.require is used to load one or more modules asynchronously at runtime. It does not define modules but rather fetches them as needed.</p>"}]}